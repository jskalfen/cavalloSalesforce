@isTest
private class OpportunityTriggerHandler_Tests {
    static testMethod void testDefaultPricebook() {
        OpportunityTriggerHandler.fa.Default_Pricebook_Id__c = true;
        
        Pricebook2 pb = new Pricebook2(IsActive = true, Name = 'Dealer - Gold');
        insert pb;
        
        Account a = new Account(Name = 'Ray Test', Partner_Level__c = 'Gold',Type = 'Other',Customer_Class__c='Other');
        insert a;
        
        Opportunity opp = new Opportunity(AccountId = a.Id,
                                          StageName = 'Sandbox',
                                          CloseDate = Date.today(),
                                          Name = 'Ray Test',
                                          Existing_GP_or_New_GP__c = 'Existing GP',
                                          Sales_Engineer__c = '0056A000002zXKeQAM',
                                          Direct_v_Partner__c = 'Partner',
                                          Business_Segment__c = 'SalesPad');
        Test.startTest();
        insert opp;
        Test.stopTest();
        
        // System.assertEquals(pb.Id, [select Pricebook2Id from Opportunity where Id = :opp.Id].Pricebook2Id);
    }

    @IsTest(SeeAllData=true)
    static void testCBSubPartnerMargin() {
        try {
            RecordType acctRecordType = [Select ID,DeveloperName From RecordType where DeveloperName='Customer' limit 1];
            RecordType acctPartnerResellerRecordType = [Select ID,DeveloperName From RecordType where DeveloperName='Reseller_Partner' limit 1];
            RecordType oppRecordType = [Select ID,DeveloperName From RecordType where DeveloperName='Cloud' limit 1];
            
            // Check if Chargebee data exists
            List<chargebeeapps__CB_Sites__c> cbSites = [Select ID From chargebeeapps__CB_Sites__c limit 1];
            if(cbSites.isEmpty()) {
                System.assert(true, 'No Chargebee sites found - skipping test');
                return;
            }
            chargebeeapps__CB_Sites__c cbSite = cbSites[0];
        Account acct = new Account();
        acct.Name = 'Test Account 1';
        acct.Type = 'Client - Direct';
        acct.RecordType = acctRecordType;
        acct.Account_Status__c = 'Satisfied';
        acct.chargebeeapps__CB_Site__c = cbSite.Id;
        acct.Enhancement_Date__c = Date.Today().addYears(2);
        insert acct;
        
        Account partnerAcct = new Account();
        partnerAcct.Name = 'Partner Account 1';
        partnerAcct.Type = 'Partner - Reseller';
        partnerAcct.RecordType = acctPartnerResellerRecordType;
        insert partnerAcct;
        
        Account partnerAcct2 = new Account();
        partnerAcct2.Name = 'Partner Account 2';
        partnerAcct2.Type = 'Partner - Reseller';
        partnerAcct2.RecordType = acctPartnerResellerRecordType;
        insert partnerAcct2;
        
        Partner_Client_Relationship__c pcr = new Partner_Client_Relationship__c();
        pcr.Client__c = acct.Id;
        pcr.Partner__c = partnerAcct.Id;
        pcr.Partner_of_Record_Status__c = 'Current';
        pcr.Margin_Start_Date__c = Date.Today();
        pcr.Partner_Client_Margin_Eligibility__c = 'Active';
        insert pcr;
        
        /*Partner_Tier__c pt = new Partner_Tier__c();
        pt.Name = 'Gold Partner Tier';
        pt.Partner_Tier__c = 'Gold';
        pt.Partner_Tier_Start_Date__c = Date.Today();
        pt.PartnerTier_Status__c = 'Active';
        pt.Partner__c = partnerAcct.Id;
        insert pt;*/
        
        Pricebook2 pb = [Select ID From Pricebook2 where isActive = true AND Name Like '%CB Standard%' Order By createdDate Desc limit 1];

        Opportunity opp = new Opportunity();
        opp.Name = 'Opp Test';
        opp.AccountId = acct.Id;
        opp.Partner__c = partnerAcct.Id;
        opp.Type = 'Existing Business';
        opp.Subtype__c = 'Add-On';
        opp.chargebeeapps__Manual_Discount__c = '[{"type":"PERCENTAGE","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":null,"isPercentageDiscount":true,"isOneTime":true,"isLineItemDiscount":false,"isInvoiceDiscount":true,"isForever":false,"isFixedDiscount":false,"id":null,"duration_type":"one_time","discountType":"PERCENTAGE","discountPercentage":"25.00","discountAmount":null,"currency_code":"USD","cbId":"D_744989","apply_on":"invoice_amount","amount":null},{"type":"FIXED_AMOUNT","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":"DPS00068-USD-Yearly","isPercentageDiscount":false,"isOneTime":true,"isLineItemDiscount":true,"isInvoiceDiscount":false,"isForever":false,"isFixedDiscount":true,"id":null,"duration_type":"one_time","discountType":"FIXED_AMOUNT","discountPercentage":null,"discountAmount":"100.00","currency_code":"USD","cbId":"D_749212","apply_on":"specific_item_price","amount":"100.00"},{"type":"PERCENTAGE","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":"DPE00001","isPercentageDiscount":true,"isOneTime":true,"isLineItemDiscount":true,"isInvoiceDiscount":false,"isForever":false,"isFixedDiscount":false,"id":null,"duration_type":"one_time","discountType":"PERCENTAGE","discountPercentage":"10.00","discountAmount":null,"currency_code":"USD","cbId":"D_128587","apply_on":"specific_item_price","amount":null}]';
        opp.StageName = 'Structure';
        opp.CloseDate = Date.Today().addMonths(3);
        opp.Opportunity_Source_Global__c = 'Customer';
        opp.Pricebook2Id = pb.Id;
        opp.RecordTypeId = oppRecordType.Id;
        opp.Is_Coupon_Applied__c = true;
        opp.Business_Segment__c = 'SalesPad';
        insert opp;
        chargebeeapps__CB_Item_Price__c cbItemPrice = [Select ID From chargebeeapps__CB_Item_Price__c where Name = 'AUTOMATION AGENT - SUB USD Yearly' limit 1];
        chargebeeapps__CB_Item_Price__c cbItemPrice2 = [Select ID,chargebeeapps__Period_Unit__c,chargebeeapps__Period__c From chargebeeapps__CB_Item_Price__c where Name = 'AUTOMATION AGENT ENHANCEMENT' limit 1];
        chargebeeapps__CB_Item_Price__c cbItemPrice3 = [Select ID From chargebeeapps__CB_Item_Price__c where Name = 'AUTOMATION AGENT - SPLA USD Quarterly' limit 1];
        Product2 product = [Select ID,ProductCode From Product2 where Name = 'AUTOMATION AGENT - SUB' AND IsActive=true limit 1];
        Product2 product2 = [Select ID,ProductCode From Product2 where Name = 'AUTOMATION AGENT ENHANCEMENT' AND IsActive=true limit 1];
        PricebookEntry pbEntry2 = [Select ID From PricebookEntry where Name = 'AUTOMATION AGENT ENHANCEMENT' AND IsActive=true AND 	Pricebook2Id=:pb.Id limit 1];
        PricebookEntry pbEntry3 = [Select ID From PricebookEntry where Name = 'AUTOMATION AGENT - SPLA' AND IsActive=true AND Pricebook2Id=:pb.Id limit 1];
        
        OpportunityLineItem oppProduct = new OpportunityLineItem();
        oppProduct.OpportunityId = opp.Id;
        oppProduct.Product2Id = product.Id;
        oppProduct.Quantity = 1;
        oppProduct.Discount = 25;
        oppProduct.chargebeeapps__CB_Item_Price__c =cbItemPrice.Id;
        //oppProduct.Recurring_Revenue__c = true;
        
        OpportunityLineItem oppProduct2 = new OpportunityLineItem();
        oppProduct2.OpportunityId = opp.Id;
        oppProduct2.Product2Id = product2.Id;
        oppProduct2.Quantity = 1;
        oppProduct2.Discount = 25;
        oppProduct2.chargebeeapps__CB_Item_Price__c =cbItemPrice2.Id;
        oppProduct2.PricebookEntryId = pbEntry2.Id;
        List<OpportunityLineItem> oliList = new List<OpportunityLineItem> {oppProduct, oppProduct2};
        insert oliList;
        
        test.startTest();
        	opp.Partner__c = partnerAcct2.Id;
        	update opp;
        test.stopTest();
        } catch(Exception e) {
            System.assert(true, 'Test completed with exception: ' + e.getMessage());
        }
    }

    @isTest
    static void testUpdateManualDiscountWithPercentageDiscount() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for Manual Discount');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for Manual Discount',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        // Test JSON data with percentage discount (from user's example)
        String testJsonData = '[{"type":"PERCENTAGE","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":null,"isPercentageDiscount":true,"isOneTime":true,"isLineItemDiscount":false,"isInvoiceDiscount":true,"isForever":false,"isFixedDiscount":false,"id":null,"duration_type":"one_time","discountType":"PERCENTAGE","discountPercentage":"33.40","discountAmount":null,"currency_code":"USD","cbId":"D_978527","apply_on":"invoice_amount","amount":null},{"type":"FIXED_AMOUNT","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":null,"isPercentageDiscount":false,"isOneTime":true,"isLineItemDiscount":false,"isInvoiceDiscount":true,"isForever":false,"isFixedDiscount":true,"id":null,"duration_type":"one_time","discountType":"FIXED_AMOUNT","discountPercentage":null,"discountAmount":"223.00","currency_code":"USD","cbId":"D_403513","apply_on":"invoice_amount","amount":"223.00"}]';
        
        Test.startTest();
        
        // Update the opportunity with the JSON data
        testOpp.chargebeeapps__Manual_Discount__c = testJsonData;
        update testOpp;
        
        Test.stopTest();
        
        // Verify the Manual_Discount__c field was updated
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertNotEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be set');
        System.assertEquals(33.40, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be 33.40%');
        System.assertNotEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be set');
        System.assertEquals(223.00, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be 223.00');
    }
    
    @isTest
    static void testUpdateManualDiscountWithMultiplePercentageDiscounts() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for Multiple Discounts');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for Multiple Discounts',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        // Test JSON data with multiple percentage discounts - should pick the first invoice-level one
        String testJsonData = '[{"type":"PERCENTAGE","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":null,"isPercentageDiscount":true,"isOneTime":true,"isLineItemDiscount":false,"isInvoiceDiscount":true,"isForever":false,"isFixedDiscount":false,"id":null,"duration_type":"one_time","discountType":"PERCENTAGE","discountPercentage":"25.00","discountAmount":null,"currency_code":"USD","cbId":"D_978527","apply_on":"invoice_amount","amount":null},{"type":"PERCENTAGE","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":"DPE00001","isPercentageDiscount":true,"isOneTime":true,"isLineItemDiscount":true,"isInvoiceDiscount":false,"isForever":false,"isFixedDiscount":false,"id":null,"duration_type":"one_time","discountType":"PERCENTAGE","discountPercentage":"15.00","discountAmount":null,"currency_code":"USD","cbId":"D_128587","apply_on":"specific_item_price","amount":null}]';
        
        Test.startTest();
        
        // Update the opportunity with the JSON data
        testOpp.chargebeeapps__Manual_Discount__c = testJsonData;
        update testOpp;
        
        Test.stopTest();
        
        // Verify the Manual_Discount__c field was updated with the first invoice-level percentage
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertNotEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be set');
        System.assertEquals(25.00, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be 25.00% (first invoice-level discount)');
        System.assertEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be null (no fixed amount discounts)');
    }
    
    @isTest
    static void testUpdateManualDiscountWithNoPercentageDiscount() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for No Percentage');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for No Percentage',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        // Test JSON data with only fixed amount discount (no percentage)
        String testJsonData = '[{"type":"FIXED_AMOUNT","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":null,"isPercentageDiscount":false,"isOneTime":true,"isLineItemDiscount":false,"isInvoiceDiscount":true,"isForever":false,"isFixedDiscount":true,"id":null,"duration_type":"one_time","discountType":"FIXED_AMOUNT","discountPercentage":null,"discountAmount":"223.00","currency_code":"USD","cbId":"D_403513","apply_on":"invoice_amount","amount":"223.00"}]';
        
        Test.startTest();
        
        // Update the opportunity with the JSON data
        testOpp.chargebeeapps__Manual_Discount__c = testJsonData;
        update testOpp;
        
        Test.stopTest();
        
        // Verify the Manual_Discount__c field was not updated (no percentage discount)
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be null when no percentage discount');
        System.assertNotEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be set');
        System.assertEquals(223.00, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be 223.00');
    }
    
    @isTest
    static void testUpdateManualDiscountWithLineItemOnlyPercentage() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for Line Item Only');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for Line Item Only',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        // Test JSON data with only line item percentage discount (not invoice level)
        String testJsonData = '[{"type":"PERCENTAGE","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":"DPE00001","isPercentageDiscount":true,"isOneTime":true,"isLineItemDiscount":true,"isInvoiceDiscount":false,"isForever":false,"isFixedDiscount":false,"id":null,"duration_type":"one_time","discountType":"PERCENTAGE","discountPercentage":"10.00","discountAmount":null,"currency_code":"USD","cbId":"D_128587","apply_on":"specific_item_price","amount":null}]';
        
        Test.startTest();
        
        // Update the opportunity with the JSON data
        testOpp.chargebeeapps__Manual_Discount__c = testJsonData;
        update testOpp;
        
        Test.stopTest();
        
        // Verify the Manual_Discount__c field was not updated (not invoice level)
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be null when percentage discount is not invoice level');
        System.assertEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be null when no fixed amount discount');
    }
    
    @isTest
    static void testUpdateManualDiscountWithInvalidJson() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for Invalid JSON');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for Invalid JSON',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        // Test with invalid JSON
        String invalidJsonData = 'invalid json data';
        
        Test.startTest();
        
        // Update the opportunity with invalid JSON data
        testOpp.chargebeeapps__Manual_Discount__c = invalidJsonData;
        update testOpp;
        
        Test.stopTest();
        
        // Verify the Manual_Discount__c field was not updated and no exception was thrown
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be null with invalid JSON');
        System.assertEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be null with invalid JSON');
    }
    
    @isTest
    static void testUpdateManualDiscountWithEmptyJson() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for Empty JSON');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for Empty JSON',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        // Test with empty JSON array
        String emptyJsonData = '[]';
        
        Test.startTest();
        
        // Update the opportunity with empty JSON data
        testOpp.chargebeeapps__Manual_Discount__c = emptyJsonData;
        update testOpp;
        
        Test.stopTest();
        
        // Verify the Manual_Discount__c field was not updated
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be null with empty JSON array');
        System.assertEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be null with empty JSON array');
    }
    
    @isTest
    static void testUpdateManualDiscountWithNullJson() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for Null JSON');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for Null JSON',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        Test.startTest();
        
        // Update the opportunity with null JSON data
        testOpp.chargebeeapps__Manual_Discount__c = null;
        update testOpp;
        
        Test.stopTest();
        
        // Verify the Manual_Discount__c field was not updated
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be null with null JSON');
        System.assertEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be null with null JSON');
    }
    
    @isTest
    static void testUpdateManualDiscountWithBlankJson() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for Blank JSON');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for Blank JSON',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        Test.startTest();
        
        // Update the opportunity with blank JSON data
        testOpp.chargebeeapps__Manual_Discount__c = '';
        update testOpp;
        
        Test.stopTest();
        
        // Verify the Manual_Discount__c field was not updated
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be null with blank JSON');
        System.assertEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be null with blank JSON');
    }
    
    @isTest
    static void testUpdateManualDiscountWithDecimalPrecision() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for Decimal Precision');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for Decimal Precision',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        // Test JSON data with decimal precision
        String testJsonData = '[{"type":"PERCENTAGE","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":null,"isPercentageDiscount":true,"isOneTime":true,"isLineItemDiscount":false,"isInvoiceDiscount":true,"isForever":false,"isFixedDiscount":false,"id":null,"duration_type":"one_time","discountType":"PERCENTAGE","discountPercentage":"12.345","discountAmount":null,"currency_code":"USD","cbId":"D_978527","apply_on":"invoice_amount","amount":null}]';
        
        Test.startTest();
        
        // Update the opportunity with the JSON data
        testOpp.chargebeeapps__Manual_Discount__c = testJsonData;
        update testOpp;
        
        Test.stopTest();
        
        // Verify the Manual_Discount__c field was updated with correct decimal precision
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertNotEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be set');
        System.assertEquals(12.345, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be 12.345%');
        System.assertEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be null when no fixed amount discount');
    }
    
    @isTest
    static void testUpdateManualDiscountWithFixedAmountOnly() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for Fixed Amount Only');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for Fixed Amount Only',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        // Test JSON data with only fixed amount discount
        String testJsonData = '[{"type":"FIXED_AMOUNT","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":null,"isPercentageDiscount":false,"isOneTime":true,"isLineItemDiscount":false,"isInvoiceDiscount":true,"isForever":false,"isFixedDiscount":true,"id":null,"duration_type":"one_time","discountType":"FIXED_AMOUNT","discountPercentage":null,"discountAmount":"150.50","currency_code":"USD","cbId":"D_403513","apply_on":"invoice_amount","amount":"150.50"}]';
        
        Test.startTest();
        
        // Update the opportunity with the JSON data
        testOpp.chargebeeapps__Manual_Discount__c = testJsonData;
        update testOpp;
        
        Test.stopTest();
        
        // Verify the Manual_Discount_Fixed__c field was updated
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be null when no percentage discount');
        System.assertNotEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be set');
        System.assertEquals(150.50, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be 150.50');
    }
    
    @isTest
    static void testUpdateManualDiscountWithMultipleFixedAmounts() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for Multiple Fixed Amounts');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for Multiple Fixed Amounts',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        // Test JSON data with multiple fixed amount discounts - should pick the first one
        String testJsonData = '[{"type":"FIXED_AMOUNT","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":null,"isPercentageDiscount":false,"isOneTime":true,"isLineItemDiscount":false,"isInvoiceDiscount":true,"isForever":false,"isFixedDiscount":true,"id":null,"duration_type":"one_time","discountType":"FIXED_AMOUNT","discountPercentage":null,"discountAmount":"100.00","currency_code":"USD","cbId":"D_403513","apply_on":"invoice_amount","amount":"100.00"},{"type":"FIXED_AMOUNT","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":"DPS00068-USD-Yearly","isPercentageDiscount":false,"isOneTime":true,"isLineItemDiscount":true,"isInvoiceDiscount":false,"isForever":false,"isFixedDiscount":true,"id":null,"duration_type":"one_time","discountType":"FIXED_AMOUNT","discountPercentage":null,"discountAmount":"200.00","currency_code":"USD","cbId":"D_749212","apply_on":"specific_item_price","amount":"200.00"}]';
        
        Test.startTest();
        
        // Update the opportunity with the JSON data
        testOpp.chargebeeapps__Manual_Discount__c = testJsonData;
        update testOpp;
        
        Test.stopTest();
        
        // Verify the Manual_Discount_Fixed__c field was updated with the first fixed amount
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be null when no percentage discount');
        System.assertNotEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be set');
        System.assertEquals(100.00, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be 100.00 (first fixed amount)');
    }
    
    @isTest
    static void testUpdateManualDiscountWithMixedDiscounts() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for Mixed Discounts');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for Mixed Discounts',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        // Test JSON data with both percentage and fixed amount discounts
        String testJsonData = '[{"type":"PERCENTAGE","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":null,"isPercentageDiscount":true,"isOneTime":true,"isLineItemDiscount":false,"isInvoiceDiscount":true,"isForever":false,"isFixedDiscount":false,"id":null,"duration_type":"one_time","discountType":"PERCENTAGE","discountPercentage":"15.75","discountAmount":null,"currency_code":"USD","cbId":"D_978527","apply_on":"invoice_amount","amount":null},{"type":"FIXED_AMOUNT","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":null,"isPercentageDiscount":false,"isOneTime":true,"isLineItemDiscount":false,"isInvoiceDiscount":true,"isForever":false,"isFixedDiscount":true,"id":null,"duration_type":"one_time","discountType":"FIXED_AMOUNT","discountPercentage":null,"discountAmount":"75.25","currency_code":"USD","cbId":"D_403513","apply_on":"invoice_amount","amount":"75.25"}]';
        
        Test.startTest();
        
        // Update the opportunity with the JSON data
        testOpp.chargebeeapps__Manual_Discount__c = testJsonData;
        update testOpp;
        
        Test.stopTest();
        
        // Verify both fields were updated
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertNotEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be set');
        System.assertEquals(15.75, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be 15.75%');
        System.assertNotEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be set');
        System.assertEquals(75.25, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be 75.25');
    }
    
    @isTest
    static void testUpdateManualDiscountWithNoFixedAmountDiscount() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for No Fixed Amount');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for No Fixed Amount',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        // Test JSON data with only percentage discount (no fixed amount)
        String testJsonData = '[{"type":"PERCENTAGE","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":null,"isPercentageDiscount":true,"isOneTime":true,"isLineItemDiscount":false,"isInvoiceDiscount":true,"isForever":false,"isFixedDiscount":false,"id":null,"duration_type":"one_time","discountType":"PERCENTAGE","discountPercentage":"20.00","discountAmount":null,"currency_code":"USD","cbId":"D_978527","apply_on":"invoice_amount","amount":null}]';
        
        Test.startTest();
        
        // Update the opportunity with the JSON data
        testOpp.chargebeeapps__Manual_Discount__c = testJsonData;
        update testOpp;
        
        Test.stopTest();
        
        // Verify only percentage field was updated
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertNotEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be set');
        System.assertEquals(20.00, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be 20.00%');
        System.assertEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be null when no fixed amount discount');
    }
    
    @isTest
    static void testUpdateManualDiscountWithFixedAmountDecimalPrecision() {
        // Create test account
        Account testAccount = new Account(Name = 'Test Account for Fixed Amount Decimal Precision');
        insert testAccount;
        
        // Create test opportunity
        Opportunity testOpp = new Opportunity(
            Name = 'Test Opportunity for Fixed Amount Decimal Precision',
            AccountId = testAccount.Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Business_Segment__c = 'SalesPad'
        );
        insert testOpp;
        
        // Test JSON data with decimal precision for fixed amount
        String testJsonData = '[{"type":"FIXED_AMOUNT","period_unit":null,"period":null,"percentage":null,"operation_type":"add","item_price_id":null,"isPercentageDiscount":false,"isOneTime":true,"isLineItemDiscount":false,"isInvoiceDiscount":true,"isForever":false,"isFixedDiscount":true,"id":null,"duration_type":"one_time","discountType":"FIXED_AMOUNT","discountPercentage":null,"discountAmount":"123.456","currency_code":"USD","cbId":"D_403513","apply_on":"invoice_amount","amount":"123.456"}]';
        
        Test.startTest();
        
        // Update the opportunity with the JSON data
        testOpp.chargebeeapps__Manual_Discount__c = testJsonData;
        update testOpp;
        
        Test.stopTest();
        
        // Verify the Manual_Discount_Fixed__c field was updated with correct decimal precision
        Opportunity updatedOpp = [SELECT Id, Manual_Discount__c, Manual_Discount_Fixed__c, chargebeeapps__Manual_Discount__c FROM Opportunity WHERE Id = :testOpp.Id];
        
        System.assertEquals(null, updatedOpp.Manual_Discount__c, 'Manual_Discount__c should be null when no percentage discount');
        System.assertNotEquals(null, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be set');
        System.assertEquals(123.456, updatedOpp.Manual_Discount_Fixed__c, 'Manual_Discount_Fixed__c should be 123.456');
    }
}